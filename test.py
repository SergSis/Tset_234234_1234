
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, ContextTypes, filters
from rembg import remove
from PIL import Image
from io import BytesIO
import nest_asyncio
import asyncio

nest_asyncio.apply()

BOT_TOKEN = '7668834365:AAH26VRUz_hHjKzbwSf51uSGBsMD-z-DaPc'
user_backgrounds = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∑–∞–º–µ–Ω–∏—Ç—å —Ñ–æ–Ω –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.\n\n"
        "1Ô∏è‚É£ –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Ñ–æ–Ω.\n"
        "2Ô∏è‚É£ –ü–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å –æ–±—ä–µ–∫—Ç–æ–º ‚Äî —è –≤—Å—Ç–∞–≤–ª—é –µ–≥–æ –≤ —Ñ–æ–Ω.\n\n"
        "–ú–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —Ñ–æ–Ω, –æ—Ç–ø—Ä–∞–≤–∏–≤ –Ω–æ–≤—ã–π —Ñ–æ–Ω –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç."
    )

async def handle_background(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    photo = await update.message.photo[-1].get_file()
    byte_stream = BytesIO()
    await photo.download_to_memory(byte_stream)
    byte_stream.seek(0)

    bg_img = Image.open(byte_stream).convert("RGBA")
    user_backgrounds[user_id] = bg_img

    await update.message.reply_text("‚úÖ –§–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å –æ–±—ä–µ–∫—Ç–æ–º.")

async def handle_foreground(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    if user_id not in user_backgrounds:
        await update.message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-—Ñ–æ–Ω.")
        return

    fg_photo = await update.message.photo[-1].get_file()
    fg_stream = BytesIO()
    await fg_photo.download_to_memory(fg_stream)
    fg_stream.seek(0)

    fg_img = Image.open(fg_stream).convert("RGBA")
    fg_removed = remove(fg_img).convert("RGBA")

    bg_img = user_backgrounds[user_id]
    bg_resized = bg_img.resize(fg_removed.size)
    composed = Image.alpha_composite(bg_resized, fg_removed)

    output = BytesIO()
    output.name = 'composed.png'
    composed.save(output, format='PNG')
    output.seek(0)

    await update.message.reply_photo(photo=output, caption="‚ú® –í–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ñ–æ–Ω–æ–º!")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id in user_backgrounds:
        await handle_foreground(update, context)
    else:
        await handle_background(update, context)

async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.initialize()
    await app.start()
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
